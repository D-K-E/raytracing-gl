#version 430
layout(local_size_x = 4, local_size_y = 4) in; // local work_group_size
layout(rgba32f, binding = 0) uniform image2D img_output;
// internal format of the image same as glTexImage2D

// start constants
// constants.hpp
float PI = 3.1415926535;
float INFINITY = 1.0 / 0.0;
// end constants
//
// --------------------- utility functions ------------------------------
float degree_to_radian(float degree) {
  //
  return degree * PI / 180.0;
}
float rand(vec2 co) {
  // random gen
  float a = 12.9898;
  float b = 78.233;
  float c = 43758.5453;
  float dt = dot(co.xy, vec2(a, b));
  float sn = mod(dt, 3.14);
  return fract(sin(sn) * c);
}
float random_double() {
  // random double
  return rand(vec2(0.0, 1.0));
}
float random_double(float mi, float mx) {
  // random double
  return rand(vec2(mi, mx));
}
vec3 random_vec() {
  // random vector
  return vec3(random_double(), random_double(), random_double());
}
vec3 random_vec(float mi, float ma) {
  // random vector in given seed
  return vec3(random_double(mi, ma), random_double(mi, ma),
              random_double(mi, ma));
}
vec3 random_in_unit_sphere() {
  // random in unit sphere
  while (true) {
    //
    vec3 v = random_vec(-1, 1);
    if (dot(v, v) >= 1) {
      continue;
    }
    return v;
  }
}
vec3 random_unit_vector() {
  // unit vector
  float a = random_double(0, 2 * PI);
  float z = random_double(-1, 1);
  float r = sqrt(1 - z * z);
  return vec3(r * cos(a), r * sin(a), z);
}
vec3 random_in_hemisphere(vec3 normal) {
  // normal ekseninde dagilan yon
  vec3 unit_sphere_dir = random_in_unit_sphere();
  if (dot(unit_sphere_dir, normal) > 0.0) {
    return unit_sphere_dir;
  } else {
    return -1 * unit_sphere_dir;
  }
}
vec3 random_in_unit_disk() {
  // lens yakinsamasi iÃ§in gerekli
  while (true) {
    vec3 point = vec3(random_double(-1, 1), random_double(-1, 1), 0);
    if (dot(point, point) >= 1) {
      continue;
    }
    return point;
  }
}

vec3 fix_color(vec3 pcolor, int samples_per_pixel) {
  float r, g, b;
  r = pcolor.x;
  g = pcolor.y;
  b = pcolor.z;
  // scale sample
  r = sqrt(r / samples_per_pixel);
  g = sqrt(g / samples_per_pixel);
  b = sqrt(b / samples_per_pixel);
  return vec3(clamp(r, 0.0, 1.0), clamp(g, 0.0, 1.0), clamp(b, 0.0, 1.0));
}

// --------------------- utility functions end --------------------------

//
struct Ray {
  vec3 origin;
  vec3 direction;
};

vec3 at(Ray r, float dist) { return r.direction * dist + r.origin; }

struct HitRecord {
  vec3 point;
  vec3 normal;
  float dist;
  bool front_face;
};

void set_face_normal(inout HitRecord rec, in Ray r, in vec3 out_normal) {
  // set face normal to hit record did we hit front or back
  rec.front_face = dot(r.direction, out_normal) < 0;
  rec.normal = (rec.front_face) ? out_normal : -1 * out_normal;
}

struct Camera {
  vec3 lower_left_corner;
  vec3 origin;
  vec3 vertical;
  vec3 horizontal;
};
Ray get_ray(Camera ca, float u, float v) {
  // get camera ray
  return Ray(ca.origin,
             ca.lower_left_corner + u * ca.horizontal + v * ca.vertical);
}

struct Sphere {
  vec3 center;
  float radius;
};

bool hitSphere(in Sphere s, in Ray r, float dist_min, float dist_max,
               inout HitRecord record) {
  // kureye isin vurdu mu onu test eden fonksiyon
  vec3 origin_to_center = r.origin - s.center;
  float a = dot(r.direction, r.direction);
  float half_b = dot(origin_to_center, r.direction);
  float c = dot(origin_to_center, origin_to_center) - s.radius * s.radius;
  float isHit = half_b * half_b - a * c;
  float margin;
  if (isHit > 0) {
    float root = sqrt(isHit);
    margin = (-1 * half_b - root) / a;
    if (margin < dist_max && margin > dist_min) {
      record.dist = margin;
      record.point = at(r, record.dist);
      vec3 out_normal = (record.point - s.center) / s.radius;
      set_face_normal(record, r, out_normal);
      return true;
    }
    margin = (-1 * half_b + root) / a;
    if (margin < dist_max && margin > dist_min) {
      record.dist = margin;
      record.point = at(r, record.dist);
      vec3 out_normal = (record.point - s.center) / s.radius;
      set_face_normal(record, r, out_normal);
      return true;
    }
  }
  return false;
}

#define SCENE_OBJECT_NB 2

struct SceneObj {
  int type; // 0 sphere, 1, other
  Sphere sp;
};

struct Scene {
  SceneObj ss[SCENE_OBJECT_NB];
};

bool hit_scene(in Scene scene, in Ray r, float dmin, float dmax,
               inout HitRecord record) {
  // check if sphere is hit
  HitRecord temp;
  bool hit_ = false;
  float current_closest = dmax;
  for (int i = 0; i < SCENE_OBJECT_NB; i++) {
    SceneObj sobj = scene.ss[i];
    if (sobj.type == 0) {
      if (hitSphere(sobj.sp, r, dmin, dmax, temp)) {
        hit_ = true;
        current_closest = temp.dist;
        record = temp;
      }
    }
  }
  return hit_;
}

vec3 ray_color(in Ray r, in Scene scene, int depth) {
  //
  HitRecord rec;
  Ray r_in;
  r_in.origin = r.origin;
  r_in.direction = r.direction;
  vec3 acolor = vec3(0);
  vec3 bcolor = vec3(1);
  for (int i = 0; i < depth; i++) {
    if (hit_scene(scene, r_in, 0.001, INFINITY, rec)) {
      vec3 target = rec.point + random_in_hemisphere(rec.normal);
      bcolor *= 0.5 * (rec.normal + vec3(1.0));
      Ray rtmp;
      rtmp.direction = target - rec.point;
      rtmp.origin = rec.point;
      r_in = rtmp;
    } else {
      vec3 dir = normalize(r.direction);
      float temp = 0.5 * (dir.y + 1.0);
      bcolor *= (1.0 - temp) * vec3(1.0) + temp * vec3(0.5, 0.8, 1.0);
      depth++;
      break; // VERY IMPORTANT without this gpu chokes ..
    }
  }
  return acolor + bcolor;
}

void main() {
  // index of global work group
  vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);
  ivec2 pixel_index = ivec2(gl_GlobalInvocationID.xy);
  ivec2 img_dims = imageSize(img_output); // image dimensions
  int imwidth = img_dims.x;
  int imheight = img_dims.y;
  int i = pixel_index.x;
  int j = pixel_index.y;
  int mdepth = 30;
  int psample = 50;

  // -------------- declare objects ---------------

  Scene scene;
  SceneObj s1, s2;
  s1.type = 0;
  s2.type = 0;
  Sphere s4 = {vec3(0, 0, -1), 0.5};
  Sphere s5 = {vec3(0, -100.5, -1), 100};
  s1.sp = s4;
  s2.sp = s5;
  scene.ss[0] = s2;
  scene.ss[1] = s1;

  //
  //
  // -------------- declare objects end -----------
  //
  Camera cam = {vec3(-2, -1, -1), vec3(0, 0, 0), vec3(0, 2, 0), vec3(4, 0, 0)};
  vec3 rcolor = vec3(0);

  for (int k = 0; k < psample; k++) {

    float u = float(i + random_double()) / (float(imwidth) - 1);
    float v = float(j + random_double()) / (float(imheight) - 1);
    Ray r = get_ray(cam, u, v);
    rcolor += ray_color(r, scene, mdepth);
  }
  rcolor = fix_color(rcolor, psample);

  // output specific pixel in the image
  imageStore(img_output, pixel_index, vec4(rcolor, 1.0));
}
